doctype html
html
  head
    title Snallabot Dashboard
    link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossOrigin="anonymous")
    link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootswatch/5.3.3/sandstone/bootstrap.min.css" crossorigin="anonymous" referrerpolicy="no-referrer")
    script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js" integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy" crossOrigin="anonymous")
body
  .div(class="container" style="padding: 16px 8px;")
    h4 #{leagueName} Snallabot Dashboard
    .row
      .col
        div(style="display: flex; justify-content: space-between; align-items: center; width: 100%; min-width: 100%;")
          div
            div #{seasonWeekType}, Year #{seasonInfo.calendarYear}
            div Current Week: #{seasonInfo.weekTitle} #{seasonInfo.displayWeek > 0 ? seasonInfo.displayWeek : ''}
      .col-lg-6
        div(style="margin-top: 16px; margin-bottom: 16px;")
          .input-group
            select.form-select#exportSelect
              each key in Object.keys(exportOptions)
                option(value=key) #{key}
            button.btn.btn-primary#exportBtn(type="button") Export
          div#exportFeedback(style="margin-top: 8px")
      .col.mt-lg-3
        button.btn.btn-danger.float-end#unlinkBtn(type="button") Unlink League
    .table-responsive
      table.table.table-hover.table-sm.caption-top
        caption List of Export Url's
        thead.table-light
          tr
            th Url
            th(style="text-align: center;") League Info
            th(style="text-align: center;") Weekly Stats
            th(style="text-align: center;") Rosters
            th(style="text-align: center;") Auto Update
            th(style="text-align: center;")
              button#addExportBtn.btn.btn-success(type="button") Add Export Url
        tbody#exportTableBody
          each exportDestination in exports
              tr
                td(class="export-url") #{exportDestination.url}
                td(style="text-align: center;")
                  input(type="checkbox", disabled=true, checked=exportDestination.leagueInfo )
                td(style="text-align: center;")
                  input(type="checkbox", disabled=true, checked=exportDestination.weeklyStats)
                td(style="text-align: center;")
                  input(type="checkbox", disabled=true, checked=exportDestination.rosters)
                td(style="text-align: center;")
                  input(type="checkbox", disabled=true, checked=exportDestination.autoUpdate)
                td(style="text-align: center;")
                  if exportDestination.editable
                    button.btn.btn-outline-danger.btn-sm.remove-export-btn(type="button") Remove
    .table-responsive
      table(class="table table-hover table-condensed caption-top" style="margin-top: 16px; margin-bottom: 16px;")
        caption Schedule for #{seasonInfo.weekTitle} #{seasonInfo.displayWeek > 0 ? seasonInfo.displayWeek : ''}
        thead.table-light
          tr
            th Game
            th Result
            th Number of Times Played
        tbody
          each seasonGame in gameScheduleHubInfo.leagueSchedule
            - const game = seasonGame.seasonGameInfo
            tr
              td #{game.isAwayHuman ? game.awayUserName : 'CPU'} #{game.awayCityName} #{game.awayName} (#{game.awayWin} - #{game.awayLoss}#{game.awayTie > 0 ? ' - ' + game.awayTie : ''}) at #{game.isHomeHuman ? game.homeUserName : 'CPU'} #{game.homeCityName} #{game.homeName} (#{game.homeWin} - #{game.homeLoss}#{game.homeTie > 0 ? ' - ' + game.homeTie : ''})
              td #{game.result || 'Not Played'}
              td #{game.numberTimesPlayed || 0}
script.
  document.getElementById('addExportBtn').addEventListener('click', function () {
  const tableBody = document.getElementById('exportTableBody');
  const newRow = document.createElement('tr');
  newRow.innerHTML = `
    <td><input type="text" class="form-control url-input" placeholder="Enter URL"></td>
    <td style="text-align: center;"><input class="leagueInfo" type="checkbox"></td>
    <td style="text-align: center;"><input class="weeklyStats" type="checkbox"></td>
    <td style="text-align: center;"><input class="rosters" type="checkbox"></td>
    <td style="text-align: center;"><input class="autoUpdate" type="checkbox"></td>
    <td style="text-align: center;">
      <button class="add-export-btn btn btn-outline-primary btn-sm">Add</button>
    </td>
  `;
  tableBody.appendChild(newRow);
  newRow.querySelector('.add-export-btn').addEventListener('click', async function () {
  const url = newRow.querySelector('.url-input').value;
  const leagueInfo = newRow.querySelector('.leagueInfo').checked;
  const weeklyStats = newRow.querySelector('.weeklyStats').checked;
  const rosters = newRow.querySelector('.rosters').checked;
  const autoUpdate = newRow.querySelector('.autoUpdate').checked;

  try {
    const response = await fetch(window.location.pathname + '/updateExport', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        url,
        leagueInfo,
        weeklyStats,
        rosters,
        autoUpdate,
        editable: true
      })
    });
    location.reload()
  } catch (error) {
    console.error('Error:', error);
    alert('An error occurred while adding the export URL.');
  }
  });
  })
  document.querySelectorAll('.remove-export-btn').forEach(btn => {
  btn.addEventListener('click', async function () {
    const row = this.closest('tr');
    const urlCell = row.querySelector('.export-url');
    const url = urlCell.textContent.trim();

    try {
      const response = await fetch(window.location.pathname + '/deleteExport', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({url})
      });

      if (response.ok) {
        location.reload();
      } else {
        alert('Failed to remove export URL.');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('An error occurred while removing the export URL.');
    }
  });
  });
  document.getElementById('exportBtn').addEventListener('click', async function () {
  const selectedOption = document.getElementById('exportSelect').value;

  try {
    const feedbackDiv = document.getElementById('exportFeedback');
    feedbackDiv.innerHTML = '';

    const badge = document.createElement('span');
    badge.className = "badge text-bg-info"
    badge.textContent = "Exporting..."
    feedbackDiv.appendChild(badge);
    const response = await fetch(window.location.pathname + '/export', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ exportOption: selectedOption })
    });
    feedbackDiv.innerHTML = '';

    const responseBadge = document.createElement('span');
    responseBadge.className = response.ok
      ? 'badge text-bg-success'
      : 'badge text-bg-danger';
    responseBadge.textContent = response.ok ? 'Export Successful :)' : 'Export failed :(';

    feedbackDiv.appendChild(responseBadge);
  } catch (error) {
    console.error('Error exporting:', error);
    alert('An error occurred while exporting.');
  }
  });

  document.getElementById('unlinkBtn').addEventListener('click', async function () {
    try {
      const response = await fetch(window.location.pathname + '/unlink', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        window.location.href = '/dashboard';
      } else {
        alert('Failed to unlink league.');
      }
    } catch (error) {
      console.error('Error unlinking league:', error);
      alert('An error occurred while unlinking the league.');
    }
  });
